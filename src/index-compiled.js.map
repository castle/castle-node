{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nimport restify from 'restify';\nimport packageJSON from '../package.json'\nimport ExpressWrapper from'./express-compiled.js';\nimport OS from 'os';\n\nclass Castle {\n\n    /**\n     *\n     * @param apiKey\n     * @param apiSecret\n     */\n    constructor({apiKey = null, apiSecret, disableClientUserAgent = false, apiUrl = 'https://api.castle.io'}) {\n        this.apiKey                 = apiKey;\n        this.apiSecret              = apiSecret;\n        this.disableClientUserAgent = disableClientUserAgent;\n        this.client                 = restify.createJsonClient({url : this.apiUrl });\n        this.getClient().basicAuth('call-the-cops-i-dont-give-a-fck', apiSecret);\n    }\n\n    /**\n     *\n     * @param {string} event the event you want to track. This can be custom or one from Castle.Events\n     * @param {string} user_id the id of the affected user (If known)\n     * @param {object} details [optional] other details for the event. EX: the $login parameter for emails\n     * @param {object} headers [optional] the HTTP headers sent by the user/client\n     * @param {string} ip [optional] the user/client's IP Address\n     * @param {string} cookie [optional] the castle cookie left by the clientside javascript sdk\n     * @returns {Promise}\n     */\n    trackEvent({event, user_id, details = undefined, headers = {}, ip = undefined, cookie = '', userAgent = ''}) {\n        return new Promise((resolve, reject) => {\n            if (event === undefined || event === null || event === \"\") {\n                return reject(new Error('Missing event', 'MISSING_EVENT_NAME'));\n            }\n\n            var postData = {\n                name    : event,\n                user_id : user_id,\n                details : details\n            };\n            this.getClient().post({\n                path    : '/v1/events',\n                headers : this.generateHeaders(headers, ip, cookie, userAgent)\n            }, postData, (error, request, response, obj) => {\n                if (error) {\n                    return reject(error);\n                } else if (request.statusCode < 200 || request.statusCode >= 300) {\n                    return reject(new Error(`Invalid HTTP Status Code ${request.statusCode}`, 'INVALID_HTTP_STATUS_CODE'))\n                }\n                return resolve(obj);\n            });\n        });\n    }\n\n    identify({user_id, user_data, headers = {}, ip = undefined, cookie = '', userAgent = ''}) {\n        return new Promise((resolve, reject) => {\n            this.getClient().put({\n                path    : `/v1/users/${user_id}`,\n                headers : this.generateHeaders(headers, ip, cookie, userAgent)\n            }, user_data, (error, request, response, obj) => {\n                if (error) {\n                    return reject(error);\n                } else if (request.statusCode < 200 || request.statusCode >= 300) {\n                    return reject(new Error(`Invalid HTTP Status Code ${request.statusCode}`, 'INVALID_HTTP_STATUS_CODE'))\n                }\n                return resolve(obj);\n            });\n        });\n    }\n\n    generateHeaders(clientHeaders, ip, cookie, userAgent) {\n        return this.stripUndefinedVariables({\n            'X-Castle-Ip'                : ip,\n            'X-Castle-Cookie-Id'         : cookie,\n            'X-Castle-User-Agent'        : userAgent,\n            'X-Castle-Headers'           : JSON.stringify(clientHeaders),\n            'X-Castle-Client-User-Agent' : this.isClientUserAgentDisabled() ? undefined : this.getClientUserAgent()\n        });\n    }\n\n    stripUndefinedVariables(obj) {\n        var toReturn = {};\n        Object.keys(obj).forEach(k => {\n            var v = obj[k];\n            if (v !== undefined && v !== null) {\n                toReturn[k] = v;\n            }\n        });\n        return toReturn;\n    }\n\n    express(opts) {\n        var castle = new Castle(opts);\n        return ExpressWrapper(castle);\n    }\n\n    getClient() {\n        return this.client;\n    }\n\n    /**\n     *\n     * @returns {{}}\n     */\n    getClientUserAgent() {\n        return {\n            bindings_version : packageJSON.version,\n            lang             : 'Node.js',\n            lang_version     : process.version,\n            platform         : OS.platform(),\n            publisher        : 'castle'\n        }\n    }\n\n    isClientUserAgentDisabled() {\n        return this.disableClientUserAgent || false;\n    }\n\n}\n\n/**\n *\n * This is used for easy access to the different DEFAULT events\n *\n * @type {{LOGIN_SUCCEEDED: string, LOGIN_FAILED: string, LOGOUT_SUCCEEDED: string, REGISTRATION_SUCCEEDED: string, REGISTRATION_FAILED: string, EMAIL_CHANGE_REQUESTED: string, EMAIL_CHANGE_SUCCEEDED: string, EMAIL_CHANGE_FAILED: string, PASSWORD_RESET_REQUESTED: string, PASSWORD_RESET_SUCCEEDED: string, PASSWORD_RESET_FAILED: string, PASSWORD_CHANGE_SUCCEEDED: string, PASSWORD_CHANGE_FAILED: string, CHALLENGE_REQUESTED: string, CHALLENGE_SUCCEEDED: string, CHALLENGE_FAILED: string}}\n */\nCastle.Events = {\n    LOGIN_SUCCEEDED           : '$login.succeeded', //Record when a user attempts to log in.\n    LOGIN_FAILED              : '$login.failed', //Record when a user logs out.\n    LOGOUT_SUCCEEDED          : '$logout.succeeded', //Record when a user logs out.\n    REGISTRATION_SUCCEEDED    : '$registration.succeeded', //Capture account creation, both when a user signs up as well as when created manually by an administrator.\n    REGISTRATION_FAILED       : '$registration.failed', //Record when an account failed to be created.\n    EMAIL_CHANGE_REQUESTED    : '$email_change.requested', //An attempt was made to change a user’s email.\n    EMAIL_CHANGE_SUCCEEDED    : '$email_change.succeeded', //The user completed all of the steps in the email address change process and the email was successfully changed.\n    EMAIL_CHANGE_FAILED       : '$email_change.failed', //Use to record when a user failed to change their email address.\n    PASSWORD_RESET_REQUESTED  : '$password_reset.requested', //An attempt was made to reset a user’s password.\n    PASSWORD_RESET_SUCCEEDED  : '$password_reset.succeeded', //The user completed all of the steps in the password reset process and the password was successfully reset. Password resets do not required knowledge of the current password.\n    PASSWORD_RESET_FAILED     : '$password_reset.failed', //Use to record when a user failed to reset their password.\n    PASSWORD_CHANGE_SUCCEEDED : '$password_change.succeeded',//Use to record when a user changed their password. This event is only logged when users change their own password.\n    PASSWORD_CHANGE_FAILED    : '$password_change.failed', //Use to record when a user failed to change their password.\n    CHALLENGE_REQUESTED       : '$challenge.requested', //Record when a user is prompted with additional verification, such as two-factor authentication or a captcha.\n    CHALLENGE_SUCCEEDED       : '$challenge.succeeded', //Record when additional verification was successful.\n    CHALLENGE_FAILED          : '$challenge.failed' //Record when additional verification failed.\n};\n\nmodule.exports = Castle;\n"]}